
#include <iostream>
#include <fstream>
#include <sstream>
#include <string>

//using namespace std;

int main() {
    std::cout << "Hello world";

    // Reading the CSV File
    std::ifstream file("BTCUSDT-trades-2025-05-20.csv");
    std::string line, value;

    // Returns all the values in the CSV file.
    while (std::getline(file, line)) {
        std::stringstream s(line);
        while (std::getline(s, value, ',')) {
            std::cout << value << ", ";
        }
        std::cout << std::endl;
    }
    return 0;
}

//// Step 2: Get Market Data --- 
// Option A (easier): Download historical price data (CSV)
// Option B (harder): Connect to Binance WebSocket API (live crypto prices)

// ✅ Goal: Print price data to console, one tick at a time

//// Step 3: Build a Basic Strategy
// Use a simple moving average crossover:

// If short MA > long MA → BUY

// If short MA < long MA → SELL
// ✅ Goal: Print "BUY"/"SELL" decisions based on price updates

// Step 4: Create a Matching Engine
// Implement a limit order book

// Match orders when buy price ≥ sell price

// Track positions and trade fills

// ✅ Goal: Execute trades generated by your strategy against your engine

// Step 5: Track PnL (Profit and Loss)
// Track open position, entry price, realized PnL

// Print live performance updates

// ✅ Goal: Know if your strategy is making or losing money

// Step 6: Log and Visualize
// Write trades to a CSV file

// Plot trades and PnL in Python (matplotlib or pandas)

// ✅ Goal: Review strategy performance visually

// Step 7 (Optional): Add Multithreading
// One thread for data feed

// One thread for strategy logic

// One thread for order matching

// ✅ Goal: Simulate real-time speed and architecture
